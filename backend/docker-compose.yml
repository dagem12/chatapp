version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: chat-app-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-chat_app}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"  # Using 5433 to avoid conflicts
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - chat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-chat_app}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chat-app-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "${REDIS_PORT:-6380}:6379"  # Using 6380 to avoid conflicts
    volumes:
      - redis_data:/data
    networks:
      - chat-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # NestJS Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chat-app-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3002}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/${POSTGRES_DB:-chat_app}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      REDIS_DB: ${REDIS_DB:-0}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000,http://localhost:5173}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chat-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Migration Service (runs once)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chat-app-migrate
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/${POSTGRES_DB:-chat_app}
    command: >
      sh -c "
        echo 'Checking for existing migrations...';
        if [ -d 'prisma/migrations' ] && [ \"\$(ls -A prisma/migrations)\" ]; then
          echo 'Migrations found, applying existing migrations...';
          npx prisma migrate deploy;
        else
          echo 'No migrations found, creating initial migration...';
          npx prisma migrate dev --name init;
        fi;
        echo 'Migration process completed.';
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chat-network
    restart: "no"

  # Database Seeding Service (runs once after migration)
  seed:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chat-app-seed
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/${POSTGRES_DB:-chat_app}
    command: ["npm", "run", "db:seed"]
    depends_on:
      migrate:
        condition: service_completed_successfully
    networks:
      - chat-network
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  chat-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
